{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13","program":"/home/titus/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","wayland_commons","/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"native_lib\"","--cfg","feature=\"wayland-sys\"","-C","metadata=bcac71acfc50c064","-C","extra-filename=-bcac71acfc50c064","--out-dir","/home/titus/writing/school-related/gymnasie-arbete/program/target/rls/debug/deps","-L","dependency=/home/titus/writing/school-related/gymnasie-arbete/program/target/rls/debug/deps","--extern","nix=/home/titus/writing/school-related/gymnasie-arbete/program/target/rls/debug/deps/libnix-f4c3783ddc1b3cfa.rmeta","--extern","wayland_sys=/home/titus/writing/school-related/gymnasie-arbete/program/target/rls/debug/deps/libwayland_sys-b973753b6ce18124.rmeta","--cap-lints","allow","-L","native=/home/titus/writing/school-related/gymnasie-arbete/program/target/rls/debug/build/libloading-f7d4cd3ba293b5a3/out","--error-format=json","--sysroot","/home/titus/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/titus/writing/school-related/gymnasie-arbete/program/target/rls/debug/deps/libwayland_commons-bcac71acfc50c064.rmeta"},"prelude":{"crate_id":{"name":"wayland_commons","disambiguator":[4264980584478061034,2772356255681122241]},"crate_root":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src","external_crates":[{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14071373652398347879,7103549041170480253]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5273437404553270099,5411348343046199890]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[976218546544352998,2134245565175613459]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13100362557277821204,18082047403827332368]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3605767859335716447,18368004652892255649]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7644919710974821109,7113146966867899407]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16182386318199163571,1953714320961812]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12664401352052491985,6928826529401171483]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17274879524252775070,15165904048009513825]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3349673540409454496,14630436784565510244]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14546748579478228105,1074460191194833292]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5671097699487010686,7534711367382902334]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7229860330014108182,6606161976056509340]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7609715969379266585,5596137465280250730]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":15,"id":{"name":"nix","disambiguator":[9810358450621685120,16001046742072106770]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":16,"id":{"name":"bitflags","disambiguator":[7825008430036718302,5422998199018937104]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[2372815132215147252,4292264114958097375]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":18,"id":{"name":"void","disambiguator":[9873087817286814951,15812316740492753371]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":19,"id":{"name":"libc","disambiguator":[17373465292948197007,11592364133634976501]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":20,"id":{"name":"wayland_sys","disambiguator":[14799249913530097541,6547820404576238072]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":21,"id":{"name":"dlib","disambiguator":[8180260041895442758,10148638019037628118]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":22,"id":{"name":"libloading","disambiguator":[5805407165898183702,4052149327838981892]}},{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","num":23,"id":{"name":"lazy_static","disambiguator":[13742715455855585293,11323021697279754273]}}],"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":0,"byte_end":5100,"line_start":1,"line_end":151,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":0,"byte_end":5100,"line_start":1,"line_end":151,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":53},{"krate":0,"index":117},{"krate":0,"index":190},{"krate":0,"index":243},{"krate":0,"index":256},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":271}],"decl_id":null,"docs":" Common definitions for wayland","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":743,"byte_end":765,"line_start":16,"line_end":16,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":284},{"krate":0,"index":293},{"krate":0,"index":17},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":33},{"krate":0,"index":48},{"krate":0,"index":51}],"decl_id":null,"docs":" Wayland objects map\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":12},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5265,"byte_end":5280,"line_start":6,"line_end":6,"column_start":11,"column_end":26},"name":"SERVER_ID_LIMIT","qualname":"::map::SERVER_ID_LIMIT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Limit separating server-created from client-created objects IDs in the namespace\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":13},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5403,"byte_end":5417,"line_start":10,"line_end":10,"column_start":11,"column_end":25},"name":"ObjectMetadata","qualname":"::map::ObjectMetadata","value":"ObjectMetadata: Clone","parent":null,"children":[{"krate":0,"index":14}],"decl_id":null,"docs":" A trait representing the metadata a wayland implementation\n may attach to an object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5558,"byte_end":5563,"line_start":14,"line_end":14,"column_start":8,"column_end":13},"name":"child","qualname":"::map::ObjectMetadata::child","value":"fn (&self) -> Self","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Create the metadata for a child object","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":284},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5732,"byte_end":5738,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"Object","qualname":"::map::Object","value":"Object { interface, version, requests, events, meta, childs_from_events, childs_from_requests }","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292}],"decl_id":null,"docs":" The representation of a protocol object\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":286},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5809,"byte_end":5818,"line_start":27,"line_end":27,"column_start":9,"column_end":18},"name":"interface","qualname":"::map::Object::interface","value":"&'static str","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Interface name of this object\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":287},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5873,"byte_end":5880,"line_start":29,"line_end":29,"column_start":9,"column_end":16},"name":"version","qualname":"::map::Object::version","value":"u32","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Version of this object\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":288},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5946,"byte_end":5954,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"name":"requests","qualname":"::map::Object::requests","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Description of the requests of this object\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":289},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6045,"byte_end":6051,"line_start":33,"line_end":33,"column_start":9,"column_end":15},"name":"events","qualname":"::map::Object::events","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Description of the events of this object\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":290},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6170,"byte_end":6174,"line_start":35,"line_end":35,"column_start":9,"column_end":13},"name":"meta","qualname":"::map::Object::meta","value":"Meta","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Metadata associated to this object (ex: its event queue client side)\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":291},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6322,"byte_end":6340,"line_start":38,"line_end":38,"column_start":9,"column_end":27},"name":"childs_from_events","qualname":"::map::Object::childs_from_events","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this event if any\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":292},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6529,"byte_end":6549,"line_start":41,"line_end":41,"column_start":9,"column_end":29},"name":"childs_from_requests","qualname":"::map::Object::childs_from_requests","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this request if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6722,"byte_end":6736,"line_start":46,"line_end":46,"column_start":12,"column_end":26},"name":"from_interface","qualname":"<Object<Meta>>::from_interface","value":"fn <I> (version: u32, meta: Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create an Object corresponding to given interface and version\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7258,"byte_end":7269,"line_start":60,"line_end":60,"column_start":12,"column_end":23},"name":"event_child","qualname":"<Object<Meta>>::event_child","value":"fn (&self, opcode: u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given event opcode\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7522,"byte_end":7535,"line_start":66,"line_end":66,"column_start":12,"column_end":25},"name":"request_child","qualname":"<Object<Meta>>::request_child","value":"fn (&self, opcode: u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given request opcode\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7726,"byte_end":7738,"line_start":71,"line_end":71,"column_start":12,"column_end":24},"name":"is_interface","qualname":"<Object<Meta>>::is_interface","value":"fn <I> (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether this object is of given interface\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":7961,"byte_end":7972,"line_start":77,"line_end":77,"column_start":12,"column_end":23},"name":"placeholder","qualname":"<Object<Meta>>::placeholder","value":"fn (meta: Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a placeholder object that will be filled-in by the message logic\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":29},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":8646,"byte_end":8655,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"ObjectMap","qualname":"::map::ObjectMap","value":"ObjectMap {  }","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" A holder for the object store of a connection","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":8871,"byte_end":8874,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"new","qualname":"<ObjectMap<Meta>>::new","value":"fn () -> ObjectMap<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty object map\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":9062,"byte_end":9066,"line_start":117,"line_end":117,"column_start":12,"column_end":16},"name":"find","qualname":"<ObjectMap<Meta>>::find","value":"fn (&self, id: u32) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Find an object in the store\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":9503,"byte_end":9509,"line_start":130,"line_end":130,"column_start":12,"column_end":18},"name":"remove","qualname":"<ObjectMap<Meta>>::remove","value":"fn (&mut self, id: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove an object from the store","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":10054,"byte_end":10063,"line_start":146,"line_end":146,"column_start":12,"column_end":21},"name":"insert_at","qualname":"<ObjectMap<Meta>>::insert_at","value":"fn (&mut self, id: u32, object: Object<Meta>) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Insert given object for given id","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":10440,"byte_end":10457,"line_start":155,"line_end":155,"column_start":12,"column_end":29},"name":"client_insert_new","qualname":"<ObjectMap<Meta>>::client_insert_new","value":"fn (&mut self, object: Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the client namespace\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":10638,"byte_end":10655,"line_start":160,"line_end":160,"column_start":12,"column_end":29},"name":"server_insert_new","qualname":"<ObjectMap<Meta>>::server_insert_new","value":"fn (&mut self, object: Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the server namespace\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":10830,"byte_end":10834,"line_start":165,"line_end":165,"column_start":12,"column_end":16},"name":"with","qualname":"<ObjectMap<Meta>>::with","value":"fn <T, F> (&mut self, id: u32, f: F) -> Result<T, ()>","parent":null,"children":[],"decl_id":null,"docs":" Mutably access an object of the map\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":11452,"byte_end":11460,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"with_all","qualname":"<ObjectMap<Meta>>::with_all","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Mutably access all objects of the map in sequence\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":53},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"socket","qualname":"::socket","value":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":75},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":89},{"krate":0,"index":102},{"krate":0,"index":107}],"decl_id":null,"docs":" Wayland socket manipulation\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":67},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13146,"byte_end":13157,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"MAX_FDS_OUT","qualname":"::socket::MAX_FDS_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of FD that can be sent in a single socket message\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":68},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13253,"byte_end":13266,"line_start":14,"line_end":14,"column_start":11,"column_end":24},"name":"MAX_BYTES_OUT","qualname":"::socket::MAX_BYTES_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of bytes that can be sent in a single socket message\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":69},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13333,"byte_end":13339,"line_start":21,"line_end":21,"column_start":12,"column_end":18},"name":"Socket","qualname":"::socket::Socket","value":"Socket {  }","parent":null,"children":[{"krate":0,"index":70}],"decl_id":null,"docs":" A wayland socket\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13707,"byte_end":13715,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"send_msg","qualname":"<Socket>::send_msg","value":"fn (&self, bytes: &[u8], fds: &[RawFd]) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a single message to the socket","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":14623,"byte_end":14630,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"rcv_msg","qualname":"<Socket>::rcv_msg","value":"fn (&self, buffer: &mut [u8], fds: &mut [RawFd]) -> NixResult<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Receive a single message from the socket","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":83},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15864,"byte_end":15878,"line_start":106,"line_end":106,"column_start":12,"column_end":26},"name":"BufferedSocket","qualname":"::socket::BufferedSocket","value":"BufferedSocket {  }","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" An adapter around a raw Socket that directly handles buffering and\n conversion from/to wayland messages\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16090,"byte_end":16093,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"new","qualname":"<BufferedSocket>::new","value":"fn (socket: Socket) -> BufferedSocket","parent":null,"children":[],"decl_id":null,"docs":" Wrap a Socket into a Buffered Socket\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16570,"byte_end":16580,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"get_socket","qualname":"<BufferedSocket>::get_socket","value":"fn (&mut self) -> &mut Socket","parent":null,"children":[],"decl_id":null,"docs":" Get direct access to the underlying socket\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16778,"byte_end":16789,"line_start":134,"line_end":134,"column_start":12,"column_end":23},"name":"into_socket","qualname":"<BufferedSocket>::into_socket","value":"fn (self) -> Socket","parent":null,"children":[],"decl_id":null,"docs":" Retrieve ownership of the underlying Socket","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16912,"byte_end":16917,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"name":"flush","qualname":"<BufferedSocket>::flush","value":"fn (&mut self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the outgoing buffer into the socket\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":18345,"byte_end":18358,"line_start":179,"line_end":179,"column_start":12,"column_end":25},"name":"write_message","qualname":"<BufferedSocket>::write_message","value":"fn (&mut self, msg: &Message) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a message to the outgoing buffer","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":18989,"byte_end":19010,"line_start":195,"line_end":195,"column_start":12,"column_end":33},"name":"fill_incoming_buffers","qualname":"<BufferedSocket>::fill_incoming_buffers","value":"fn (&mut self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to fill the incoming buffers of this socket, to prepare\n a new round of parsing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":20884,"byte_end":20900,"line_start":237,"line_end":237,"column_start":12,"column_end":28},"name":"read_one_message","qualname":"<BufferedSocket>::read_one_message","value":"fn <F> (&mut self, mut signature: F) -> Result<Message, MessageParseError>","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize a single message from the incoming buffers socket","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":23442,"byte_end":23455,"line_start":294,"line_end":294,"column_start":12,"column_end":25},"name":"read_messages","qualname":"<BufferedSocket>::read_messages","value":"fn <F1, F2> (&mut self, mut signature: F1, mut callback: F2) -> NixResult<Result<usize, MessageParseError>>","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize messages from the socket","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":157}],"decl_id":null,"docs":" Various utilities used for other implementations\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":123},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":34917,"byte_end":34925,"line_start":10,"line_end":10,"column_start":12,"column_end":20},"name":"UserData","qualname":"::utils::UserData","value":"UserData {  }","parent":null,"children":[{"krate":0,"index":124}],"decl_id":null,"docs":" A wrapper for user data, able to store any type, and correctly\n handling access from a wrong thread\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35435,"byte_end":35449,"line_start":29,"line_end":29,"column_start":12,"column_end":26},"name":"new_threadsafe","qualname":"<UserData>::new_threadsafe","value":"fn <T> (value: T) -> UserData","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UserData` using a threadsafe type","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35781,"byte_end":35784,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<UserData>::new","value":"fn <T> (value: T) -> UserData","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UserData` using a non-threadsafe type","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":36009,"byte_end":36014,"line_start":46,"line_end":46,"column_start":12,"column_end":17},"name":"empty","qualname":"<UserData>::empty","value":"fn () -> UserData","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UserData` containing nothing\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":36462,"byte_end":36465,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"get","qualname":"<UserData>::get","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":145},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37120,"byte_end":37131,"line_start":77,"line_end":77,"column_start":12,"column_end":23},"name":"UserDataMap","qualname":"::utils::UserDataMap","value":"UserDataMap {  }","parent":null,"children":[{"krate":0,"index":146}],"decl_id":null,"docs":" A storage able to store several values of `UserData`\n of different types. It behaves similarly to a `TypeMap`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37224,"byte_end":37227,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<UserDataMap>::new","value":"fn () -> UserDataMap","parent":null,"children":[],"decl_id":null,"docs":" Create a new map\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37529,"byte_end":37532,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"get","qualname":"<UserDataMap>::get","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data of a given type","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38245,"byte_end":38262,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"insert_if_missing","qualname":"<UserDataMap>::insert_if_missing","value":"fn <T, F> (&self, init: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":38898,"byte_end":38926,"line_start":127,"line_end":127,"column_start":12,"column_end":40},"name":"insert_if_missing_threadsafe","qualname":"<UserDataMap>::insert_if_missing_threadsafe","value":"fn <T, F> (&self, init: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":308},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":39694,"byte_end":39704,"line_start":157,"line_end":157,"column_start":16,"column_end":26},"name":"AppendList","qualname":"::utils::list::AppendList","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":40294,"byte_end":40297,"line_start":178,"line_end":178,"column_start":16,"column_end":19},"name":"new","qualname":"<AppendList<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":40373,"byte_end":40379,"line_start":182,"line_end":182,"column_start":16,"column_end":22},"name":"append","qualname":"<AppendList<T>>::append","value":"fn (&self, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41103,"byte_end":41114,"line_start":205,"line_end":205,"column_start":16,"column_end":27},"name":"append_list","qualname":"<AppendList<T>>::append_list","value":"fn (&self, other: AppendList<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41300,"byte_end":41304,"line_start":211,"line_end":211,"column_start":16,"column_end":20},"name":"iter","qualname":"<AppendList<T>>::iter","value":"fn (&self) -> AppendListIterator<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":315},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41834,"byte_end":41852,"line_start":232,"line_end":232,"column_start":16,"column_end":34},"name":"AppendListIterator","qualname":"::utils::list::AppendListIterator","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":190},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wire","qualname":"::wire","value":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":324},{"krate":0,"index":348},{"krate":0,"index":346},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":341},{"krate":0,"index":349},{"krate":0,"index":380},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":374},{"krate":0,"index":204},{"krate":0,"index":382},{"krate":0,"index":392},{"krate":0,"index":390},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":394},{"krate":0,"index":402},{"krate":0,"index":400},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":404},{"krate":0,"index":413},{"krate":0,"index":411},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":230},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":240}],"decl_id":null,"docs":" Types and routines used to manipulate arguments from the wire format\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":200},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":42918,"byte_end":42929,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"MessageDesc","qualname":"::wire::MessageDesc","value":"MessageDesc { name, signature, since }","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203}],"decl_id":null,"docs":" Wire metadata of a given message\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":201},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":42969,"byte_end":42973,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"name","qualname":"::wire::MessageDesc::name","value":"&'static str","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Name of this message\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":202},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43030,"byte_end":43039,"line_start":15,"line_end":15,"column_start":9,"column_end":18},"name":"signature","qualname":"::wire::MessageDesc::signature","value":"&'static [wire::ArgumentType]","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Signature of the message\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":203},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43124,"byte_end":43129,"line_start":17,"line_end":17,"column_start":9,"column_end":14},"name":"since","qualname":"::wire::MessageDesc::since","value":"u32","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Minimum required version of the interface\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":325},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43282,"byte_end":43285,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::ArgumentType::Int","value":"ArgumentType::Int","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":327},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43303,"byte_end":43307,"line_start":26,"line_end":26,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::ArgumentType::Uint","value":"ArgumentType::Uint","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":329},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43350,"byte_end":43355,"line_start":28,"line_end":28,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::ArgumentType::Fixed","value":"ArgumentType::Fixed","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":331},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43377,"byte_end":43380,"line_start":30,"line_end":30,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::ArgumentType::Str","value":"ArgumentType::Str","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" CString\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":333},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43417,"byte_end":43423,"line_start":32,"line_end":32,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::ArgumentType::Object","value":"ArgumentType::Object","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":335},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43474,"byte_end":43479,"line_start":34,"line_end":34,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::ArgumentType::NewId","value":"ArgumentType::NewId","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":337},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43501,"byte_end":43506,"line_start":36,"line_end":36,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::ArgumentType::Array","value":"ArgumentType::Array","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Vec<u8>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":339},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43526,"byte_end":43528,"line_start":38,"line_end":38,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::ArgumentType::Fd","value":"ArgumentType::Fd","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":324},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43251,"byte_end":43263,"line_start":22,"line_end":22,"column_start":10,"column_end":22},"name":"ArgumentType","qualname":"::wire::ArgumentType","value":"ArgumentType::{Int, Uint, Fixed, Str, Object, NewId, Array, Fd}","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":339}],"decl_id":null,"docs":" Enum of possible argument types as recognized by the wire\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":350},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43678,"byte_end":43681,"line_start":45,"line_end":45,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::Argument::Int","value":"Argument::Int(i32)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":353},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43704,"byte_end":43708,"line_start":47,"line_end":47,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::Argument::Uint","value":"Argument::Uint(u32)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":356},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43756,"byte_end":43761,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::Argument::Fixed","value":"Argument::Fixed(i32)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":359},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43788,"byte_end":43791,"line_start":51,"line_end":51,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::Argument::Str","value":"Argument::Str(CString)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" CString\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":362},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43837,"byte_end":43843,"line_start":53,"line_end":53,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::Argument::Object","value":"Argument::Object(u32)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":365},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43899,"byte_end":43904,"line_start":55,"line_end":55,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::Argument::NewId","value":"Argument::NewId(u32)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":368},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43931,"byte_end":43936,"line_start":57,"line_end":57,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::Argument::Array","value":"Argument::Array(Vec<u8>)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Vec<u8>\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":371},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43965,"byte_end":43967,"line_start":59,"line_end":59,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::Argument::Fd","value":"Argument::Fd(RawFd)","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":349},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43651,"byte_end":43659,"line_start":43,"line_end":43,"column_start":10,"column_end":18},"name":"Argument","qualname":"::wire::Argument","value":"Argument::{Int, Uint, Fixed, Str, Object, NewId, Array, Fd}","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":356},{"krate":0,"index":359},{"krate":0,"index":362},{"krate":0,"index":365},{"krate":0,"index":368},{"krate":0,"index":371}],"decl_id":null,"docs":" Enum of possible argument as recognized by the wire, including values\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44061,"byte_end":44069,"line_start":64,"line_end":64,"column_start":12,"column_end":20},"name":"get_type","qualname":"<Argument>::get_type","value":"fn (&self) -> ArgumentType","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the type of a given argument instance\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":382},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44627,"byte_end":44634,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"Message","qualname":"::wire::Message","value":"Message { sender_id, opcode, args }","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"decl_id":null,"docs":" A wire message\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":383},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44691,"byte_end":44700,"line_start":82,"line_end":82,"column_start":9,"column_end":18},"name":"sender_id","qualname":"::wire::Message::sender_id","value":"u32","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" ID of the object sending this message\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":384},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44745,"byte_end":44751,"line_start":84,"line_end":84,"column_start":9,"column_end":15},"name":"opcode","qualname":"::wire::Message::opcode","value":"u16","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Opcode of the message\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":385},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44799,"byte_end":44803,"line_start":86,"line_end":86,"column_start":9,"column_end":13},"name":"args","qualname":"::wire::Message::args","value":"std::vec::Vec<wire::Argument>","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Arguments of the message\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":395},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45009,"byte_end":45023,"line_start":93,"line_end":93,"column_start":5,"column_end":19},"name":"BufferTooSmall","qualname":"::wire::MessageWriteError::BufferTooSmall","value":"MessageWriteError::BufferTooSmall","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" The buffer is too small to hold the message contents\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":397},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45088,"byte_end":45099,"line_start":95,"line_end":95,"column_start":5,"column_end":16},"name":"DupFdFailed","qualname":"::wire::MessageWriteError::DupFdFailed","value":"MessageWriteError::DupFdFailed(::nix::Error)","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" The message contains a FD that could not be dup-ed\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":394},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":44924,"byte_end":44941,"line_start":91,"line_end":91,"column_start":10,"column_end":27},"name":"MessageWriteError","qualname":"::wire::MessageWriteError","value":"MessageWriteError::{BufferTooSmall, DupFdFailed}","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":397}],"decl_id":null,"docs":" Error generated when trying to serialize a message into buffers\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":405},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45896,"byte_end":45905,"line_start":119,"line_end":119,"column_start":5,"column_end":14},"name":"MissingFD","qualname":"::wire::MessageParseError::MissingFD","value":"MessageParseError::MissingFD","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" The message references a FD but the buffer FD is empty\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":407},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45966,"byte_end":45977,"line_start":121,"line_end":121,"column_start":5,"column_end":16},"name":"MissingData","qualname":"::wire::MessageParseError::MissingData","value":"MessageParseError::MissingData","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" More data is needed to deserialize the message\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":409},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46037,"byte_end":46046,"line_start":123,"line_end":123,"column_start":5,"column_end":14},"name":"Malformed","qualname":"::wire::MessageParseError::Malformed","value":"MessageParseError::Malformed","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" The message is malformed and cannot be parsed\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":404},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45809,"byte_end":45826,"line_start":117,"line_end":117,"column_start":10,"column_end":27},"name":"MessageParseError","qualname":"::wire::MessageParseError","value":"MessageParseError::{MissingFD, MissingData, Malformed}","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":409}],"decl_id":null,"docs":" Error generated when trying to deserialize a message from buffers\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46904,"byte_end":46920,"line_start":148,"line_end":148,"column_start":12,"column_end":28},"name":"write_to_buffers","qualname":"<Message>::write_to_buffers","value":"fn <'a, 'b> (&self, payload: &'a mut [u32], mut fds: &'b mut [RawFd]) -> Result<(usize, usize), MessageWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the contents of this message into provided buffers","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":50729,"byte_end":50737,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<Message>::from_raw","value":"fn <'a, 'b> (raw: &'a [u32], signature: &[ArgumentType], fds: &'b [RawFd]) -> Result<(Message, &'a [u32], &'b [RawFd]), MessageParseError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to parse a single wayland message with the given signature.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":230},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":54335,"byte_end":54349,"line_start":329,"line_end":329,"column_start":8,"column_end":22},"name":"dup_fd_cloexec","qualname":"::wire::dup_fd_cloexec","value":"fn (fd: RawFd) -> NixResult<RawFd>","parent":null,"children":[],"decl_id":null,"docs":" Duplicate a `RawFd` and set the CLOEXEC flag on the copy\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":243},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1333,"byte_end":1345,"line_start":39,"line_end":39,"column_start":11,"column_end":23},"name":"MessageGroup","qualname":"::MessageGroup","value":"MessageGroup: Sized","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253}],"decl_id":null,"docs":" A group of messages","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":244},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1414,"byte_end":1422,"line_start":41,"line_end":41,"column_start":11,"column_end":19},"name":"MESSAGES","qualname":"::MessageGroup::MESSAGES","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Wire representation of this MessageGroup\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":245},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1595,"byte_end":1598,"line_start":44,"line_end":44,"column_start":10,"column_end":13},"name":"Map","qualname":"::MessageGroup::Map","value":"type Map;","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" The wrapper type for ObjectMap allowing the mapping of Object and\n NewId arguments to the object map during parsing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1642,"byte_end":1648,"line_start":46,"line_end":46,"column_start":8,"column_end":14},"name":"opcode","qualname":"::MessageGroup::opcode","value":"fn (&self) -> u16","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" The opcode of this message\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1810,"byte_end":1823,"line_start":50,"line_end":50,"column_start":8,"column_end":21},"name":"is_destructor","qualname":"::MessageGroup::is_destructor","value":"fn (&self) -> bool","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Whether this message is a destructor","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1919,"byte_end":1924,"line_start":52,"line_end":52,"column_start":8,"column_end":13},"name":"child","qualname":"::MessageGroup::child","value":"fn <Meta> (opcode: u16, version: u32, meta: &Meta) -> Option<::map::Object<Meta>>","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Retrieve the child `Object` associated with this message if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2124,"byte_end":2132,"line_start":58,"line_end":58,"column_start":8,"column_end":16},"name":"from_raw","qualname":"::MessageGroup::from_raw","value":"fn (msg: wire::Message, map: &mut Self::Map) -> Result<Self, ()>","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Construct a message from its raw representation\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2256,"byte_end":2264,"line_start":60,"line_end":60,"column_start":8,"column_end":16},"name":"into_raw","qualname":"::MessageGroup::into_raw","value":"fn (self, send_id: u32) -> wire::Message","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Turn this message into its raw representation\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2420,"byte_end":2430,"line_start":63,"line_end":63,"column_start":15,"column_end":25},"name":"from_raw_c","qualname":"::MessageGroup::from_raw_c","value":"fn (obj: *mut c_void, opcode: u32, args: *const syscom::wl_argument) -> Result<Self, ()>","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Construct a message of this group from its C representation\n","sig":null,"attributes":[{"value":"cfg(feature = \"native_lib\")","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2307,"byte_end":2337,"line_start":61,"line_end":61,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2722,"byte_end":2733,"line_start":70,"line_end":70,"column_start":8,"column_end":19},"name":"as_raw_c_in","qualname":"::MessageGroup::as_raw_c_in","value":"fn <F, T> (self, f: F) -> T","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Build a C representation of this message","sig":null,"attributes":[{"value":"cfg(feature = \"native_lib\")","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2529,"byte_end":2559,"line_start":65,"line_end":65,"column_start":5,"column_end":35}}]},{"kind":"Trait","id":{"krate":0,"index":256},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":2986,"byte_end":2995,"line_start":79,"line_end":79,"column_start":11,"column_end":20},"name":"Interface","qualname":"::Interface","value":"Interface: 'static","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"decl_id":null,"docs":" The description of a wayland interface","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":257},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3137,"byte_end":3144,"line_start":83,"line_end":83,"column_start":10,"column_end":17},"name":"Request","qualname":"::Interface::Request","value":"type Request: MessageGroup + 'static;","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Set of requests associated to this interface","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":258},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3296,"byte_end":3301,"line_start":87,"line_end":87,"column_start":10,"column_end":15},"name":"Event","qualname":"::Interface::Event","value":"type Event: MessageGroup + 'static;","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Set of events associated to this interface","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":259},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3368,"byte_end":3372,"line_start":89,"line_end":89,"column_start":11,"column_end":15},"name":"NAME","qualname":"::Interface::NAME","value":"&'static str","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Name of this interface\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":260},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3450,"byte_end":3457,"line_start":91,"line_end":91,"column_start":11,"column_end":18},"name":"VERSION","qualname":"::Interface::VERSION","value":"u32","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Maximum supported version of this interface\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3564,"byte_end":3575,"line_start":94,"line_end":94,"column_start":8,"column_end":19},"name":"c_interface","qualname":"::Interface::c_interface","value":"fn () -> *const ::syscom::wl_interface","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Pointer to the C representation of this interface\n","sig":null,"attributes":[{"value":"cfg(feature = \"native_lib\")","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3468,"byte_end":3498,"line_start":92,"line_end":92,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":262},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3771,"byte_end":3786,"line_start":101,"line_end":101,"column_start":12,"column_end":27},"name":"AnonymousObject","qualname":"::AnonymousObject","value":"","parent":null,"children":[],"decl_id":null,"docs":" Anonymous interface","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":264},"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3861,"byte_end":3870,"line_start":104,"line_end":104,"column_start":10,"column_end":19},"name":"NoMessage","qualname":"::NoMessage","value":"NoMessage::{}","parent":null,"children":[],"decl_id":null,"docs":" An empty enum representing a MessageGroup with no messages\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6626,"byte_end":6632,"line_start":44,"line_end":44,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":8804,"byte_end":8813,"line_start":107,"line_end":107,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13365,"byte_end":13371,"line_start":25,"line_end":25,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15348,"byte_end":15354,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15454,"byte_end":15460,"line_start":82,"line_end":82,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15542,"byte_end":15548,"line_start":88,"line_end":88,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15626,"byte_end":15632,"line_start":94,"line_end":94,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16017,"byte_end":16031,"line_start":114,"line_end":114,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":25688,"byte_end":25694,"line_start":370,"line_end":370,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35244,"byte_end":35252,"line_start":22,"line_end":22,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35277,"byte_end":35285,"line_start":23,"line_end":23,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35295,"byte_end":35303,"line_start":25,"line_end":25,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37174,"byte_end":37185,"line_start":81,"line_end":81,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":39742,"byte_end":39752,"line_start":159,"line_end":159,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41648,"byte_end":41658,"line_start":225,"line_end":225,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41923,"byte_end":41941,"line_start":234,"line_end":234,"column_start":34,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43984,"byte_end":43992,"line_start":62,"line_end":62,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45147,"byte_end":45164,"line_start":98,"line_end":98,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45533,"byte_end":45550,"line_start":109,"line_end":109,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46080,"byte_end":46097,"line_start":126,"line_end":126,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46498,"byte_end":46515,"line_start":136,"line_end":136,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46676,"byte_end":46683,"line_start":142,"line_end":142,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":55551,"byte_end":55558,"line_start":366,"line_end":366,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":55773,"byte_end":55780,"line_start":378,"line_end":378,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3894,"byte_end":3909,"line_start":106,"line_end":106,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":4222,"byte_end":4231,"line_start":118,"line_end":118,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":987,"byte_end":990,"line_start":27,"line_end":27,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1000,"byte_end":1006,"line_start":28,"line_end":28,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":53}},{"kind":"Mod","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1016,"byte_end":1021,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":117}},{"kind":"Mod","span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1031,"byte_end":1035,"line_start":30,"line_end":30,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":190}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":5419,"byte_end":5424,"line_start":10,"line_end":10,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2181},"to":{"krate":0,"index":13}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":6626,"byte_end":6632,"line_start":44,"line_end":44,"column_start":28,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/map.rs","byte_start":8804,"byte_end":8813,"line_start":107,"line_end":107,"column_start":28,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":29},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":13365,"byte_end":13371,"line_start":25,"line_end":25,"column_start":6,"column_end":12},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":69},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15348,"byte_end":15354,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":8119}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15454,"byte_end":15460,"line_start":82,"line_end":82,"column_start":18,"column_end":24},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":8117}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15542,"byte_end":15548,"line_start":88,"line_end":88,"column_start":20,"column_end":26},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":8121}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":15626,"byte_end":15632,"line_start":94,"line_end":94,"column_start":15,"column_end":21},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":69},"to":{"krate":2,"index":1726}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":16017,"byte_end":16031,"line_start":114,"line_end":114,"column_start":6,"column_end":20},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/socket.rs","byte_start":25688,"byte_end":25694,"line_start":370,"line_end":370,"column_start":25,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35244,"byte_end":35252,"line_start":22,"line_end":22,"column_start":22,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":123},"to":{"krate":2,"index":1533}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35277,"byte_end":35285,"line_start":23,"line_end":23,"column_start":22,"column_end":30},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":123},"to":{"krate":2,"index":1545}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":35295,"byte_end":35303,"line_start":25,"line_end":25,"column_start":6,"column_end":14},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":123},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":37174,"byte_end":37185,"line_start":81,"line_end":81,"column_start":6,"column_end":17},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":39742,"byte_end":39752,"line_start":159,"line_end":159,"column_start":13,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41648,"byte_end":41658,"line_start":225,"line_end":225,"column_start":22,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":308},"to":{"krate":2,"index":1726}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/utils.rs","byte_start":41923,"byte_end":41941,"line_start":234,"line_end":234,"column_start":34,"column_end":52},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":315},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":43984,"byte_end":43992,"line_start":62,"line_end":62,"column_start":6,"column_end":14},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45147,"byte_end":45164,"line_start":98,"line_end":98,"column_start":30,"column_end":47},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":394},"to":{"krate":1,"index":1616}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":45533,"byte_end":45550,"line_start":109,"line_end":109,"column_start":30,"column_end":47},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46080,"byte_end":46097,"line_start":126,"line_end":126,"column_start":30,"column_end":47},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":404},"to":{"krate":1,"index":1616}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46498,"byte_end":46515,"line_start":136,"line_end":136,"column_start":30,"column_end":47},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":404},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":46676,"byte_end":46683,"line_start":142,"line_end":142,"column_start":6,"column_end":13},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":55551,"byte_end":55558,"line_start":366,"line_end":366,"column_start":6,"column_end":13},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/wire.rs","byte_start":55773,"byte_end":55780,"line_start":378,"line_end":378,"column_start":15,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":234},"to":{"krate":2,"index":1726}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":1347,"byte_end":1352,"line_start":39,"line_end":39,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":243}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":3894,"byte_end":3909,"line_start":106,"line_end":106,"column_start":20,"column_end":35},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":262},"to":{"krate":0,"index":256}},{"span":{"file_name":"/home/titus/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.21.13/src/lib.rs","byte_start":4222,"byte_end":4231,"line_start":118,"line_end":118,"column_start":23,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":264},"to":{"krate":0,"index":243}}]}